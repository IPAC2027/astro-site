---
import '../styles/content.css';

export interface Heading {
  text: string;
  slug: string;
}

export interface Props {
  title: string;
  description?: string;
  showBackToParent?: boolean;
  parentLink?: string;
  parentName?: string;
  bannerTitle?: string;
  bannerDescription?: string;
  bannerText?: string;
  bannerBackground?: string;
  headings?: Heading[];
}

interface SectionItem {
  name: string;
  href: string;
}

interface SectionConfig {
  title: string;
  items: SectionItem[];
  bannerTitle?: string;
  bannerDescription?: string;
}

const { 
  title, 
  description, 
  showBackToParent = false, 
  parentLink, 
  parentName,
  bannerTitle,
  bannerDescription,
  bannerText,
  bannerBackground,
  headings = []
} = Astro.props;

// Get section from URL
const currentPath = Astro.url.pathname;
const pathParts = currentPath.split('/').filter(Boolean);
const sectionKey = pathParts[0];

// Import centralized navigation configuration
import { navigationConfig, getSectionItems } from '../utils/navigation-config.ts';

// Create sections config for backward compatibility with banner functionality
const sections: Record<string, SectionConfig> = {
  'about': {
    title: 'About',
    bannerTitle: 'About IPAC\'27',
    bannerDescription: '',
    items: getSectionItems('about')
  },
  'program': {
    title: 'Program',
    bannerTitle: 'IPAC\'27 Programs',
    bannerDescription: '',
    items: getSectionItems('program')
  },
  'registration': {
    title: 'Registration',
    bannerTitle: 'Registration',
    bannerDescription: '',
    items: getSectionItems('registration')
  },
  'authors': {
    title: 'Authors',
    bannerTitle: 'For Authors',
    bannerDescription: '',
    items: getSectionItems('authors')
  },
  'exhibitors': {
    title: 'Exhibitors',
    bannerTitle: 'Exhibition & Sponsorship',
    bannerDescription: '',
    items: getSectionItems('exhibitors')
  },
  'travel': {
    title: 'Travel',
    bannerTitle: 'Travel & Accommodation',
    bannerDescription: '',
    items: getSectionItems('travel')
  }
};

const currentSection = sections[sectionKey];

// Determine banner content - use props first, then section defaults
const finalBannerTitle = bannerTitle || currentSection?.bannerTitle || title;
const finalBannerDescription = bannerDescription || currentSection?.bannerDescription || description;

import Layout from './Layout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
---

<Layout title={`${title} - IPAC'27`} description={description}>
  <Navigation />
  
  <!-- Page Header Banner -->
  <section class="relative bg-gradient-to-r from-primary-800 to-accent-800 text-white py-16 overflow-hidden">
    {bannerBackground && (
      <div 
        class="absolute inset-0 bg-cover bg-center bg-no-repeat" 
        style={`background-image: url('${bannerBackground}');`}
      ></div>
    )}
    <div class="absolute inset-0 bg-black opacity-40"></div>
    <div class="relative max-w-[88rem] mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-end">
        <div class="flex-1">
          <h1 class="text-4xl md:text-5xl font-heading font-bold mb-4">{finalBannerTitle}</h1>
        </div>
        {bannerText && (
          <div class="flex-shrink-0 ml-8 mr-8">
            <p class="text-2xl md:text-3xl font-semibold text-right text-white/90">
              {bannerText}
            </p>
          </div>
        )}
      </div>
    </div>
  </section>
  
    <main class="flex-grow bg-gray-50">
    <div class="max-w-[96rem] mx-auto px-4 sm:px-6 lg:px-8 py-4 md:py-8">
      <!-- Mobile Navigation Toggle (only visible on mobile) -->
      <div class="md:hidden mb-4">
        <button 
          id="mobile-sidebar-toggle"
          class="w-full bg-white border border-gray-200 rounded-lg p-4 flex items-center justify-between text-left shadow-sm hover:bg-gray-50 transition-colors"
          aria-expanded="false"
          aria-controls="mobile-sidebar"
        >
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-3 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            <span class="font-medium text-gray-900">
              {currentSection ? `${currentSection.title} Menu` : 'Navigation Menu'}
            </span>
          </div>
          <svg id="mobile-toggle-icon" class="w-5 h-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
      </div>

      <div class="flex gap-4">
        <!-- Sidebar Navigation - Hidden on mobile, shown when toggled -->
        <div 
          id="mobile-sidebar"
          class="w-full md:w-64 md:flex-shrink-0 hidden md:block"
        >
          <div class="bg-white rounded-lg shadow-sm border p-4 md:p-6 md:sticky md:top-8">
            {showBackToParent && parentLink && parentName && (
              <div class="mb-4">
                <a href={parentLink} class="text-primary-600 hover:text-primary-700 text-sm font-medium flex items-center">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Back to {parentName}
                </a>
              </div>
            )}
            
            {currentSection && (
              <>
                <!-- Main Section Header with Tree Icon -->
                <div class="flex items-center mb-4 p-3 bg-primary-50 rounded-lg border-l-4 border-primary-500">
                  <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v0"></path>
                  </svg>
                  <h3 class="text-lg font-semibold text-primary-800">{currentSection.title}</h3>
                </div>
                
                <!-- Navigation Tree -->
                <nav class="space-y-1 relative">
                  <!-- Tree line decoration (hidden on mobile) -->
                  <div class="absolute left-4 top-0 bottom-0 w-px bg-gray-200 hidden md:block"></div>
                  
                  {currentSection.items.map((item, index) => (
                    <>
                      <div class="relative">
                        <!-- Tree branch (hidden on mobile) -->
                        <div class="absolute left-4 top-4 w-3 h-px bg-gray-200 hidden md:block"></div>
                        <!-- Tree node (hidden on mobile) -->
                        <div class="absolute left-3 top-3 w-2 h-2 bg-gray-300 rounded-full hidden md:block"></div>
                        
                        <a 
                          href={item.href}
                          class={`block pl-2 md:pl-8 pr-3 py-3 md:py-2 rounded-md text-sm font-medium transition-all duration-200 relative ${
                            currentPath === item.href 
                              ? 'bg-primary-100 text-primary-700 border-l-2 border-primary-500 shadow-sm' 
                              : 'text-gray-600 hover:text-gray-900 md:hover:pl-9'
                          }`}
                          style={currentPath !== item.href ? 'background: linear-gradient(to right, transparent 0%, transparent 1.5rem, var(--hover-bg, transparent) 1.5rem);' : ''}
                          onmouseenter="this.style.setProperty('--hover-bg', 'rgb(249 250 251)')"
                          onmouseleave="this.style.setProperty('--hover-bg', 'transparent')"
                          onclick="if (window.innerWidth < 768) { document.getElementById('mobile-sidebar').classList.add('hidden'); document.getElementById('mobile-sidebar-toggle').setAttribute('aria-expanded', 'false'); }"
                        >
                          <!-- Active indicator -->
                          {currentPath === item.href && (
                            <div class="absolute left-3 top-3 w-2 h-2 bg-primary-500 rounded-full animate-pulse hidden md:block"></div>
                          )}
                          
                          <span class="flex items-center">
                            {currentPath === item.href && (
                              <svg class="w-3 h-3 mr-2 text-primary-600" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                              </svg>
                            )}
                            {item.name}
                          </span>
                        </a>
                      </div>
                      
                      {/* Show headings as sub-items if this is the current page */}
                      {currentPath === item.href && headings && headings.length > 0 && (
                        <div class="ml-4 md:ml-8 space-y-1 mt-1">
                          {headings.map((heading) => (
                            <a
                              href={`#${heading.slug}`}
                              class="block pl-4 pr-3 py-1.5 rounded-md text-xs font-medium text-gray-500 hover:text-primary-600 hover:bg-gray-50 transition-all duration-200"
                            >
                              {heading.text}
                            </a>
                          ))}
                        </div>
                      )}
                    </>
                  ))}
                </nav>
              </>
            )}
          </div>
        </div>

        <!-- Main Content -->
        <div class="flex-1 min-w-0">
          <div class="rounded-lg shadow-sm">
            <!-- Page Header -->
            <div class="border-b border-gray-200 px-4 md:px-8 py-4 md:py-6">
              <h1 class="text-2xl md:text-3xl font-bold text-gray-900">{title}</h1>
              {description && (
                <p class="text-base md:text-lg text-gray-600 mt-2">{description}</p>
              )}
            </div>

            <!-- Page Content -->
            <div class="px-4 md:px-8 py-4 md:py-6">
              <div class="prose prose-sm md:prose-lg max-w-none">
                <slot />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

<!-- Back to Top Button -->
<button
  id="back-to-top"
  class="fixed bottom-8 right-8 bg-primary-600/60 hover:bg-primary-600/80 backdrop-blur-sm text-white p-3 rounded-full shadow-md hover:shadow-lg opacity-0 invisible transition-all duration-300 z-50"
  aria-label="Back to top"
>
  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
  </svg>
</button>  <Footer />
</Layout>

<style>
  /* Custom content styles that make content easier to manage */
  :global(.content-section) {
    @apply mb-8;
  }

  :global(.content-title) {
    @apply text-2xl font-semibold text-gray-900 mb-4;
  }

  :global(.content-subtitle) {
    @apply text-xl font-semibold text-gray-900 mb-3;
  }

  :global(.content-text) {
    @apply text-gray-600 mb-4 leading-relaxed;
  }

  :global(.content-list) {
    @apply space-y-2 text-gray-600 mb-6;
    /* Ensure proper spacing in multi-column layout */
    break-inside: avoid-column;
    /* Multi-column layout for wider screens */
    column-count: 1; /* Start with 1 column by default */
    column-gap: 2rem;
    column-fill: balance;
  }

  /* Responsive multi-column breakpoints */
  @media (min-width: 1200px) {
    :global(.content-list) {
      column-count: 2; /* 2 columns for tablets and laptops */
    }
  }

  @media (min-width: 2560px) {
    :global(.content-list) {
      column-count: 3; /* 3 columns for large screens */
    }
  }

  :global(.content-list li) {
    @apply relative pl-4;
    /* Prevent list items from breaking across columns */
    break-inside: avoid;
    display: block;
  }

  :global(.content-list li::before) {
    @apply absolute left-0 text-primary-600;
    content: "•";
  }

  :global(.content-highlight) {
    @apply bg-primary-50 border border-primary-200 rounded-lg p-6 mb-6;
  }

  :global(.content-warning) {
    @apply bg-amber-50 border border-amber-200 rounded-lg p-6 mb-6;
  }

  :global(.content-success) {
    @apply bg-green-50 border border-green-200 rounded-lg p-6 mb-6;
  }

  :global(.content-card) {
    @apply bg-gray-50 rounded-lg p-6 mb-6;
  }

  :global(.content-grid) {
    @apply grid grid-cols-1 md:grid-cols-2 gap-6 mb-8;
  }

  :global(.content-grid-1) {
    @apply grid grid-cols-1 gap-6 mb-8;
  }

  :global(.content-grid-3) {
    @apply grid grid-cols-1 md:grid-cols-3 gap-6 mb-8;
  }

  :global(.btn-primary) {
    @apply bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors inline-block;
  }

  :global(.btn-secondary) {
    @apply border border-primary-600 text-primary-600 hover:bg-primary-50 px-6 py-3 rounded-lg font-semibold transition-colors inline-block;
  }

  :global(.status-badge) {
    @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-medium;
  }

  :global(.status-coming-soon) {
    @apply bg-amber-100 text-amber-800;
  }

  :global(.status-available) {
    @apply bg-green-100 text-green-800;
  }

  :global(.status-closed) {
    @apply bg-red-100 text-red-800;
  }

  /* Collapsible Animation Styles */
  :global(details) {
    transition: all 0.3s ease-in-out;
  }

  :global(details summary) {
    transition: all 0.2s ease-in-out;
    position: relative;
  }

  :global(details summary::after) {
    content: "▶";
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    transition: transform 0.2s ease-in-out;
    color: #6b7280;
    font-size: 0.875rem;
  }

  :global(details[open] summary::after) {
    transform: translateY(-50%) rotate(90deg);
  }

  :global(details summary:hover) {
    background-color: #f9fafb !important;
  }

  :global(details[open] summary) {
    border-bottom: 1px solid #e5e7eb;
  }

  /* Mobile sidebar animations */
  @media (max-width: 767px) {
    #mobile-sidebar {
      transition: all 0.3s ease-in-out;
    }
    
    #mobile-sidebar.hidden {
      opacity: 0;
      transform: translateY(-10px);
    }
    
    #mobile-sidebar:not(.hidden) {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Mobile sidebar toggle functionality
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButton = document.getElementById('mobile-sidebar-toggle');
    const sidebar = document.getElementById('mobile-sidebar');
    const toggleIcon = document.getElementById('mobile-toggle-icon');
    
    if (toggleButton && sidebar && toggleIcon) {
      toggleButton.addEventListener('click', function() {
        const isHidden = sidebar.classList.contains('hidden');
        
        if (isHidden) {
          sidebar.classList.remove('hidden');
          toggleButton.setAttribute('aria-expanded', 'true');
          toggleIcon.style.transform = 'rotate(180deg)';
        } else {
          sidebar.classList.add('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
          toggleIcon.style.transform = 'rotate(0deg)';
        }
      });
      
      // Close sidebar when clicking outside on mobile
      document.addEventListener('click', function(event) {
        if (window.innerWidth < 768 && event.target instanceof Node) {
          const isClickInsideSidebar = sidebar.contains(event.target);
          const isClickOnToggle = toggleButton.contains(event.target);
          
          if (!isClickInsideSidebar && !isClickOnToggle && !sidebar.classList.contains('hidden')) {
            sidebar.classList.add('hidden');
            toggleButton.setAttribute('aria-expanded', 'false');
            toggleIcon.style.transform = 'rotate(0deg)';
          }
        }
      });
      
      // Close sidebar when window is resized to desktop
      window.addEventListener('resize', function() {
        if (window.innerWidth >= 768) {
          sidebar.classList.remove('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
          toggleIcon.style.transform = 'rotate(0deg)';
        } else {
          sidebar.classList.add('hidden');
        }
      });
    }

    // Back to top button functionality
    const backToTopButton = document.getElementById('back-to-top');
    
    if (backToTopButton) {
      // Show/hide button based on scroll position
      window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
          backToTopButton.classList.remove('opacity-0', 'invisible');
          backToTopButton.classList.add('opacity-100', 'visible');
        } else {
          backToTopButton.classList.remove('opacity-100', 'visible');
          backToTopButton.classList.add('opacity-0', 'invisible');
        }
      });
      
      // Scroll to top when button is clicked
      backToTopButton.addEventListener('click', function() {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });
    }
  });
</script>
