---
export interface HeroProps {
  title: string;
  subtitle: string;
  backgroundImage?: string;
  conferenceDetails: {
    dates: string;
    location: string;
    venue: string;
  };
  callToAction: {
    primary: {
      text: string;
      href: string;
    };
    secondary: {
      text: string;
      href: string;
    };
  };
}

const { title, subtitle, backgroundImage, conferenceDetails, callToAction } = Astro.props;
---

<section 
  id="hero-section"
  class="relative bg-gradient-to-br from-primary-900 via-primary-800 to-accent-900 text-white overflow-hidden transition-all duration-[2000ms] hero-custom-ease hero-initial"
>
  {backgroundImage && (
    <div 
      class="absolute inset-0 bg-cover bg-center bg-no-repeat" 
      style={`background-image: url('${backgroundImage}');`}
    ></div>
  )}
  <div class="absolute inset-0 bg-black opacity-40"></div>
  <div class="relative h-full flex items-center justify-center transition-all duration-[2000ms] hero-custom-ease" style="align-items: center; transform: translateY(-10%);">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 w-full">
      <div class="text-center transform transition-all duration-[2000ms] hero-custom-ease">
      <h1 class="text-4xl md:text-6xl lg:text-7xl font-heading font-bold mb-6 transform transition-all duration-[2000ms] hero-custom-ease">
        {title}
      </h1>
      <h2 class="text-xl md:text-2xl lg:text-3xl font-light mb-8 transform transition-all duration-[2000ms] hero-custom-ease">
        {subtitle}
      </h2>
      
      <!-- Conference Details -->
      <div class="bg-white/10 backdrop-blur-md rounded-lg p-6 md:p-8 mb-8 max-w-2xl mx-auto transform transition-all duration-[2000ms] hero-custom-ease">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-center">
          <div>
            <div class="text-accent-300 text-3xl font-bold">{conferenceDetails.dates}</div>
            <div class="text-gray-200">Conference Dates</div>
          </div>
          <div>
            <div class="text-accent-300 text-3xl font-bold">{conferenceDetails.location}</div>
            <div class="text-gray-200">{conferenceDetails.venue}</div>
          </div>
        </div>
      </div>

      <!-- Call to Action Buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center transform transition-all duration-[2000ms] hero-custom-ease">
        <a href={callToAction.primary.href} class="bg-accent-500 hover:bg-accent-600 text-white px-8 py-3 rounded-lg font-semibold transition-colors duration-200">
          {callToAction.primary.text}
        </a>
        <a href={callToAction.secondary.href} class="border-2 border-white text-white hover:bg-white hover:text-primary-900 px-8 py-3 rounded-lg font-semibold transition-all duration-200">
          {callToAction.secondary.text}
        </a>
      </div>
    </div>
  </div>
  
  <!-- Decorative background elements -->
  <div class="absolute top-20 left-10 w-72 h-72 bg-accent-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
  <div class="absolute bottom-20 right-10 w-72 h-72 bg-primary-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
</section>

<style>
  /* Custom easing function: slow start, accelerate, then slow end */
  .hero-custom-ease {
    transition-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1);
  }
  
  /* Initial state - large height */
  .hero-initial {
    min-height: 100vh;
  }
  
  /* Final state - smaller height */
  .hero-shrunk {
    min-height: 57vh;
  }
  
  /* Ensure content stays perfectly centered during transition */
  #hero-section {
    display: flex;
    flex-direction: column;
  }
  
  #hero-section > .relative {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Animation delay utility */
  .animation-delay-2000 {
    animation-delay: 2s;
  }
</style>

<script>
  // Trigger the shrink animation after page load
  document.addEventListener('DOMContentLoaded', function() {
    const heroSection = document.getElementById('hero-section');
    
    if (heroSection) {
      // Small delay to ensure initial state is rendered
      setTimeout(() => {
        heroSection.classList.remove('hero-initial');
        heroSection.classList.add('hero-shrunk');
      }, 1000); // Start animation after 1000ms (1 second)
    }
  });
</script>
