---
export interface StatsProps {
  globalImpact: {
    title: string;
    subtitle: string;
    description: string;
    stats: {
      years: number;
      expectedAttendees: number;
      countries: number;
      presentations: number;
    };
    statsLabels: {
      years: string;
      expectedAttendees: string;
      countries: string;
      presentations: string;
    };
  };
}

const { globalImpact } = Astro.props;
---

<section class="bg-white dark:bg-primary-800 py-16 border-t border-primary-100 dark:border-primary-700 transition-colors duration-300">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <h2 class="text-3xl font-heading font-bold text-primary-900 dark:text-primary-100 mb-4">{globalImpact.title}</h2>
      <p class="text-lg text-primary-600 dark:text-primary-300 max-w-2xl mx-auto">
        {globalImpact.subtitle}
      </p>
    </div>
    
    <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
      <div class="stats-card text-center animate-initial">
        <div class="mb-2">
          <span class="text-4xl md:text-5xl font-bold text-primary-600 counter" data-target={globalImpact.stats.years}>0</span>
        </div>
        <p class="text-sm md:text-base text-primary-600 dark:text-primary-300 font-medium">{globalImpact.statsLabels.years}</p>
      </div>
      
      <div class="stats-card text-center animate-initial">
        <div class="mb-2">
          <span class="text-4xl md:text-5xl font-bold text-accent-600 counter" data-target={globalImpact.stats.expectedAttendees}>0</span>
          <span class="text-2xl md:text-3xl text-accent-600">+</span>
        </div>
        <p class="text-sm md:text-base text-primary-600 dark:text-primary-300 font-medium">{globalImpact.statsLabels.expectedAttendees}</p>
      </div>
      
      <div class="stats-card text-center animate-initial">
        <div class="mb-2">
          <span class="text-4xl md:text-5xl font-bold text-primary-600 counter" data-target={globalImpact.stats.countries}>0</span>
          <span class="text-2xl md:text-3xl text-primary-600">+</span>
        </div>
        <p class="text-sm md:text-base text-primary-600 dark:text-primary-300 font-medium">{globalImpact.statsLabels.countries}</p>
      </div>
      
      <div class="stats-card text-center animate-initial">
        <div class="mb-2">
          <span class="text-4xl md:text-5xl font-bold text-accent-600 counter" data-target={globalImpact.stats.presentations}>0</span>
          <span class="text-2xl md:text-3xl text-accent-600">+</span>
        </div>
        <p class="text-sm md:text-base text-primary-600 dark:text-primary-300 font-medium">{globalImpact.statsLabels.presentations}</p>
      </div>
    </div>
  </div>
</section>

<style>
  /* Scroll animation styles */
  .animate-initial {
    opacity: 0;
    transform: translateY(50px);
    transition: all 0.8s cubic-bezier(0.25, 0.1, 0.25, 1);
    transition-delay: var(--animation-delay, 0ms);
  }
  
  .animate-in {
    opacity: 1;
    transform: translateY(0);
  }
  
  .animate-out {
    opacity: 0;
    transform: translateY(50px);
  }
  
  /* Stagger animation delays for stats cards */
  .stats-card:nth-child(1) { --animation-delay: 0ms; }
  .stats-card:nth-child(2) { --animation-delay: 150ms; }
  .stats-card:nth-child(3) { --animation-delay: 300ms; }
  .stats-card:nth-child(4) { --animation-delay: 450ms; }
  
  .counter {
    transition: all 0.3s ease;
  }
</style>

<script>
  // Scroll-triggered animations
  class ScrollAnimations {
    private observer: IntersectionObserver;
    
    constructor() {
      this.observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const element = entry.target as HTMLElement;
              element.classList.add('animate-in');
              element.classList.remove('animate-out');
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '0px 0px -100px 0px'
        }
      );
    }
    
    public observeElements(selector: string): void {
      const elements = document.querySelectorAll(selector);
      elements.forEach((element) => {
        this.observer.observe(element);
      });
    }
    
    public disconnect(): void {
      this.observer.disconnect();
    }
  }
  
  // Animated counter effect
  function animateCounters() {
    const counters = document.querySelectorAll('.counter');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const counter = entry.target as HTMLElement;
          const target = parseInt(counter.getAttribute('data-target') || '0');
          const duration = 2000; // 2 seconds
          const step = target / (duration / 16); // 60fps
          
          let current = 0;
          const timer = setInterval(() => {
            current += step;
            counter.textContent = Math.floor(current).toLocaleString();
            
            if (current >= target) {
              counter.textContent = target.toLocaleString();
              clearInterval(timer);
            }
          }, 16);
          
          observer.unobserve(counter);
        }
      });
    });
    
    counters.forEach((counter) => observer.observe(counter));
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const scrollAnimations = new ScrollAnimations();
    scrollAnimations.observeElements('.stats-card');
    animateCounters();
  });
</script>