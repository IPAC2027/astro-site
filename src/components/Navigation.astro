---
import { navigationConfig } from '../utils/navigation-config.ts';

const navigation = [
  { name: 'Home', href: '/' },
  ...navigationConfig.map((section: any) => ({
    name: section.name,
    submenu: section.submenu
  })),
  { name: 'Contact', href: '/contact' },
];

const currentPath = Astro.url.pathname;
---

<nav class="bg-white dark:bg-primary-800 shadow-md sticky top-0 z-50 transition-colors duration-300">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-20 md:h-32">
      <div class="flex items-center">
        <a href="/" class="flex-shrink-0 flex items-center">
          <img class="h-12 md:h-16 w-auto" src="/ipac27.png" alt="IPAC27 Logo" />
        </a>
      </div>
      
      <!-- Desktop Navigation -->
            <!-- Desktop Navigation -->
      <div class="hidden md:flex md:items-center md:space-x-1">
        {navigation.map((item: any) => (
          <div class="relative group">
            {item.href ? (
              <a
                href={item.href}
                class={`px-4 py-2 rounded-lg text-base font-medium transition-all duration-200 ${
                  currentPath === item.href || (item.submenu && item.submenu.some((sub: any) => currentPath === sub.href))
                    ? 'bg-accent-50 dark:bg-accent-900/30 text-accent-700 dark:text-accent-300 shadow-sm'
                    : 'text-primary-700 dark:text-primary-200 hover:text-accent-600 dark:hover:text-accent-400 hover:bg-accent-50 dark:hover:bg-primary-700 hover:shadow-sm transform hover:scale-105'
                }`}
              >
                {item.name}
              </a>
            ) : (
              <button class={`px-4 py-2 rounded-lg text-base font-medium transition-all duration-200 ${
                item.submenu && item.submenu.some((sub: any) => currentPath === sub.href)
                  ? 'bg-accent-50 dark:bg-accent-900/30 text-accent-700 dark:text-accent-300 shadow-sm'
                  : 'text-primary-700 dark:text-primary-200 hover:text-accent-600 dark:hover:text-accent-400 hover:bg-accent-50 dark:hover:bg-primary-700 hover:shadow-sm transform hover:scale-105'
              }`}>
                {item.name}
                {item.submenu && (
                  <svg class="ml-1 h-4 w-4 inline-block transition-transform duration-200 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                )}
              </button>
            )}
            
            {item.submenu && (
              <div class="absolute left-0 top-full mt-1 w-48 bg-white dark:bg-primary-800 rounded-lg shadow-xl dark:shadow-primary-900/50 border-0 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform group-hover:translate-y-1">
                {item.submenu.map((subitem: any) => (
                  <a
                    href={subitem.href}
                    class={`block px-4 py-2 text-base hover:bg-accent-50 dark:hover:bg-primary-700 hover:text-accent-600 dark:hover:text-accent-400 first:rounded-t-lg last:rounded-b-lg transition-all duration-200 hover:pl-6 ${
                      currentPath === subitem.href
                        ? 'text-accent-600 dark:text-accent-400 bg-accent-50 dark:bg-primary-700'
                        : 'text-primary-700 dark:text-primary-200'
                    }`}
                  >
                    {subitem.name}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center">
        <button
          type="button"
          class="mobile-menu-button inline-flex items-center justify-center p-3 rounded-md text-primary-600 dark:text-primary-300 hover:text-primary-700 dark:hover:text-primary-200 hover:bg-primary-100 dark:hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-accent-500 transition-colors"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg class="block h-7 w-7" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="mobile-menu hidden md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white dark:bg-primary-800 border-t dark:border-primary-700 shadow-lg transition-colors duration-300">
      {navigation.map((item: any, index: number) => (
        <div>
          {item.href ? (
            <a
              href={item.href}
              class={`block px-4 py-3 rounded-md text-base font-medium transition-colors duration-200 ${
                currentPath === item.href
                  ? 'text-accent-600 dark:text-accent-400 bg-accent-50 dark:bg-primary-700'
                  : 'text-primary-700 dark:text-primary-200 hover:text-accent-600 dark:hover:text-accent-400 hover:bg-accent-50 dark:hover:bg-primary-700'
              }`}
            >
              {item.name}
            </a>
          ) : (
            <button 
              class={`mobile-submenu-toggle w-full text-left px-4 py-3 rounded-md text-base font-medium transition-colors duration-200 flex items-center justify-between ${
                item.submenu && item.submenu.some((sub: any) => currentPath === sub.href)
                  ? 'text-accent-600 dark:text-accent-400 bg-accent-50 dark:bg-primary-700'
                  : 'text-primary-700 dark:text-primary-200 hover:text-accent-600 dark:hover:text-accent-400 hover:bg-accent-50 dark:hover:bg-primary-700'
              }`}
              data-menu-index={index}
              aria-expanded="false"
            >
              <span>{item.name}</span>
              <svg class="submenu-arrow w-5 h-5 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
          )}
          {item.submenu && (
            <div 
              class="mobile-submenu hidden ml-4 mt-1 space-y-1 border-l-2 border-primary-200 pl-4 overflow-hidden"
              data-submenu-index={index}
              style="max-height: 0; transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out; opacity: 0;"
            >
              {item.submenu.map((subitem: any) => (
                                <a
                  href={subitem.href}
                  class={`block px-3 py-3 text-base rounded-md transition-colors duration-200 ${
                    currentPath === subitem.href
                      ? 'text-accent-600 dark:text-accent-400 bg-accent-50 dark:bg-primary-700'
                      : 'text-primary-600 dark:text-primary-300 hover:text-accent-600 dark:hover:text-accent-400 hover:bg-accent-50 dark:hover:bg-primary-700'
                  }`}
                >
                  {subitem.name}
                </a>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    const submenuToggles = document.querySelectorAll('.mobile-submenu-toggle');
    
    // Main mobile menu toggle
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.contains('hidden');
        mobileMenu.classList.toggle('hidden');
        mobileMenuButton.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
        
        // Close all submenus when main menu is closed
        if (!isHidden) {
          closeAllSubmenus();
        }
      });
    }
    
    // Submenu accordion functionality
    submenuToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        const menuIndex = toggle.getAttribute('data-menu-index');
        const currentSubmenu = document.querySelector(`[data-submenu-index="${menuIndex}"]`) as HTMLElement;
        const currentArrow = toggle.querySelector('.submenu-arrow') as HTMLElement;
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
        
        // Close all other submenus first (accordion behavior)
        submenuToggles.forEach(otherToggle => {
          if (otherToggle !== toggle) {
            const otherMenuIndex = otherToggle.getAttribute('data-menu-index');
            const otherSubmenu = document.querySelector(`[data-submenu-index="${otherMenuIndex}"]`) as HTMLElement;
            const otherArrow = otherToggle.querySelector('.submenu-arrow') as HTMLElement;
            
            if (otherSubmenu && otherArrow) {
              otherSubmenu.style.maxHeight = '0';
              otherSubmenu.style.opacity = '0';
              otherToggle.setAttribute('aria-expanded', 'false');
              otherArrow.style.transform = 'rotate(0deg)';
              
              setTimeout(() => {
                otherSubmenu.classList.add('hidden');
              }, 300);
            }
          }
        });
        
        // Toggle current submenu
        if (currentSubmenu && currentArrow) {
          if (isExpanded) {
            // Close current submenu
            currentSubmenu.style.maxHeight = '0';
            currentSubmenu.style.opacity = '0';
            toggle.setAttribute('aria-expanded', 'false');
            currentArrow.style.transform = 'rotate(0deg)';
            
            setTimeout(() => {
              currentSubmenu.classList.add('hidden');
            }, 300);
          } else {
            // Open current submenu
            currentSubmenu.classList.remove('hidden');
            const scrollHeight = currentSubmenu.scrollHeight;
            
            requestAnimationFrame(() => {
              currentSubmenu.style.maxHeight = scrollHeight + 'px';
              currentSubmenu.style.opacity = '1';
              toggle.setAttribute('aria-expanded', 'true');
              currentArrow.style.transform = 'rotate(180deg)';
            });
          }
        }
      });
    });
    
    // Helper function to close all submenus
    function closeAllSubmenus() {
      submenuToggles.forEach(toggle => {
        const menuIndex = toggle.getAttribute('data-menu-index');
        const submenu = document.querySelector(`[data-submenu-index="${menuIndex}"]`) as HTMLElement;
        const arrow = toggle.querySelector('.submenu-arrow') as HTMLElement;
        
        if (submenu && arrow) {
          submenu.style.maxHeight = '0';
          submenu.style.opacity = '0';
          toggle.setAttribute('aria-expanded', 'false');
          arrow.style.transform = 'rotate(0deg)';
          
          setTimeout(() => {
            submenu.classList.add('hidden');
          }, 300);
        }
      });
    }
    
    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (mobileMenu && mobileMenuButton && e.target instanceof Node) {
        const isClickInMenu = mobileMenu.contains(e.target);
        const isClickOnButton = mobileMenuButton.contains(e.target);
        
        if (!isClickInMenu && !isClickOnButton && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          closeAllSubmenus();
        }
      }
    });
  });
</script>
