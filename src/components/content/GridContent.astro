---
import type { ContentGrid } from '../../types/content.ts';

export interface Props {
  content: ContentGrid;
}

const { content } = Astro.props;

/**
 * Parse markdown content in card items and convert to renderable elements
 * Supports lists, bold text, links, and regular paragraphs
 */
function parseCardMarkdown(content: string) {
  const lines = content.split('\n').map(line => line.trim()).filter(line => line);
  const elements = [];
  
  let i = 0;
  while (i < lines.length) {
    const line = lines[i];
    
    // Check if this is a list item
    if (line.startsWith('* ') || line.startsWith('- ')) {
      // Collect all consecutive list items
      const listItems = [];
      while (i < lines.length && (lines[i].startsWith('* ') || lines[i].startsWith('- '))) {
        const itemContent = lines[i].substring(2).trim();
        // Process markdown formatting in list item (order matters!)
        const processedItem = itemContent
          .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-accent-600 dark:text-accent-400 hover:text-accent-700 dark:hover:text-accent-300 underline transition-all duration-200 hover:underline-offset-4">$1</a>')
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
          .replace(/\*(.*?)\*/g, '<em>$1</em>')
          .replace(/`(.*?)`/g, '<code>$1</code>');
        listItems.push(processedItem);
        i++;
      }
      
      // Create a list element
      elements.push(
        <ul class="list-disc list-inside space-y-1 text-sm">
          {listItems.map(item => (
            <li set:html={item}></li>
          ))}
        </ul>
      );
    } else {
      // Regular text line - parse markdown formatting (order matters!)
      let processedLine = line
        .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-accent-600 dark:text-accent-400 hover:text-accent-700 dark:hover:text-accent-300 underline transition-all duration-200 hover:underline-offset-4">$1</a>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code>$1</code>');
      
      elements.push(<div class="mb-1" set:html={processedLine}></div>);
      i++;
    }
  }
  
  return elements;
}

// Determine grid CSS class based on column count
const columns = Number(content.columns);
const gridClass = columns === 3 ? 'content-grid-3' : 
                  columns === 1 ? 'content-grid-1' : 'content-grid';
---

<div class={gridClass}>
  {content.items.map(item => (
    <div class="bg-white dark:bg-primary-800 rounded-lg p-6 border-0 shadow-md hover:shadow-xl dark:shadow-primary-900/50 dark:hover:shadow-primary-900/80 transition-all duration-300 transform hover:scale-[1.02]">
      {item.icon && (
        <div class="text-2xl mb-3">{item.icon}</div>
      )}
      <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-2">{item.title}</h4>
      <div class="text-primary-600 dark:text-primary-300 text-sm">
        {parseCardMarkdown(item.content)}
      </div>
    </div>
  ))}
</div>