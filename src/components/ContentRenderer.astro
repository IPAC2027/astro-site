---
import type { ContentBlock } from '../types/content.ts';

export interface Props {
  blocks: ContentBlock[];
}

const { blocks } = Astro.props;
---

{blocks.map(block => {
  switch (block.type) {
    case 'title':
      return <h2 class="content-title">{block.content}</h2>;
    
    case 'subtitle':
      return <h3 class="content-subtitle">{block.content}</h3>;
    
    case 'text':
      return <p class="content-text">{block.content}</p>;
    
    case 'list':
      return (
        <ul class="content-list">
          {Array.isArray(block.content) && block.content.map(item => (
            <li>{item}</li>
          ))}
        </ul>
      );
    
    case 'highlight':
      return (
        <div class="content-highlight">
          <p class="text-primary-800 font-medium m-0">{block.content}</p>
        </div>
      );
    
    case 'warning':
      return (
        <div class="content-warning">
          <div class="flex items-start">
            <svg class="w-5 h-5 text-amber-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <p class="text-amber-800 font-medium m-0">{block.content}</p>
          </div>
        </div>
      );
    
    case 'success':
      return (
        <div class="content-success">
          <div class="flex items-start">
            <svg class="w-5 h-5 text-green-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-green-800 font-medium m-0">{block.content}</p>
          </div>
        </div>
      );
    
    case 'info':
      return (
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
          <div class="flex items-start">
            <svg class="w-5 h-5 text-blue-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-blue-800 font-medium m-0">{block.content}</p>
          </div>
        </div>
      );
    
    case 'card':
      return (
        <div class="content-card">
          <p class="text-gray-700 m-0">{block.content}</p>
        </div>
      );
    
    case 'grid':
      if (typeof block.content === 'object' && 'columns' in block.content) {
        const gridClass = block.content.columns === 3 ? 'content-grid-3' : 'content-grid';
        return (
          <div class={gridClass}>
            {block.content.items.map(item => (
              <div class="bg-white rounded-lg p-6 shadow-sm border">
                {item.icon && (
                  <div class="text-2xl mb-3">{item.icon}</div>
                )}
                <h4 class="font-semibold text-gray-900 mb-2">{item.title}</h4>
                <p class="text-gray-600 text-sm">{item.content}</p>
              </div>
            ))}
          </div>
        );
      }
      return null;
    
    case 'button':
      return (
        <div class="my-6">
          <a 
            href={block.url || '#'} 
            class="btn-primary"
          >
            {block.buttonText || block.content}
          </a>
        </div>
      );
    
    case 'status':
      const statusClass = `status-badge status-${block.status || 'coming-soon'}`;
      return (
        <div class="my-4">
          <span class={statusClass}>
            {block.status === 'coming-soon' && '⏳ '}
            {block.status === 'available' && '✅ '}
            {block.status === 'closed' && '❌ '}
            {block.content}
          </span>
        </div>
      );
    
    default:
      return null;
  }
})}
